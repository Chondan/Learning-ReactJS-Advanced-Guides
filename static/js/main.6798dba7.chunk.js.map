{"version":3,"sources":["components/Accessibility/index.js","components/CodeSplitting/index.js","components/Context/otherComponents/theme-context.js","components/Context/otherComponents/themed-button.js","components/Context/otherComponents/area.js","components/Context/index.js","components/ErrorBoundaries/index.js","components/ForwardingRefs/index.js","components/Fragments/index.js","components/HigherOrderComponents/index.js","components/IntegratingWithOtherLibraries/index.js","components/JSXInDepth/OtherComponents/stories.js","components/JSXInDepth/index.js","components/OptimizingPerformance/index.js","components/Portals/index.js","components/ProfilerAPI/index.js","components/Reconciliation/index.js","components/RefsAndTheDOM/index.js","components/RenderProp/index.js","components/StaticTypeChecking/index.js","components/StrictMode/index.js","components/TypecheckingWithPropTypes/index.js","components/UncontrolledComponents/index.js","App.js","index.js"],"names":["Form","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","type","aria-label","aria-required","onChange","target","value","name","SemanticTag","href","Glossary","items","term","descriptions","ListItem","item","map","description","key","uuid4","props","AccessibleForm","htmlFor","aria-labelledby","id","FocusControl","tabIndex","onClick","alert","title","Skiplinks","children","ParentInput","inputElement","React","createRef","this","current","focus","ChildInput","placeholder","inputRef","Component","ref","MouseAndPointerEvents","OuterClickExample","onClickOutsideHandler","buttonRef","setState","isOpen","state","container","window","addEventListener","removeEventListener","className","BlurExample","onBlurHandler","timeOutId","setTimeout","onFocusHandler","clearTimeout","style","border","padding","onBlur","onFocus","MoreComplexWidgets","OtherPointsForConsideration","lang","DevelopmentAndTestingTools","Accessibility","CodeSplitting","result","setResult","inputRefA","inputRefB","inputA","inputB","a","then","math","add","res","ExampleReactLazyComponent","lazy","Hello","module","default","Hello2","Hola","getResult","fallback","themes","light","foreground","background","dark","ThemeContext","createContext","theme","toggleTheme","ThemedButton","context","color","backgroundColor","contextType","Toolbar","onclick","Area","changeTheme","bind","changeToTheme","Provider","UserContext","Toobar","setTheme","handleChange","checked","displayName","document","body","changeThemeTo","LoginPage","lastGuest","setLastGuest","userInputRef","legend","label","username","password","forwardRef","Consumer","obj","CoinContext","UsernameContext","ShoppingPage","UserTab","UserStatus","coin","CaveatExampleContext","something","CaveatExample","Math","random","toFixed","number","setNumber","Fragment","CaveatExampleChild","CaveatExampleLastChild","Context","ErrorBoundaryComponent","error","errorInfo","hasError","toString","componentStack","BuggyCounter","handleClick","counter","Error","cursor","display","fontSize","ErrorBoundaryExample","ErrorBoundaries","FancyButton","FancyButtonParent","useEffect","Elem","WrappedComponent","LogProps","prevProps","forwardedRef","rest","logProps","LogPropsExample","count","setCount","myRef","ForwardingRefs","Family","Columns","Table","Fragments","Greeting","greetingMsg","generateGreeting","getGreeting","HelloGreeting","HolaGreeting","withIncrementCount","EnhancedComponent","incrementCount","prevState","age","Button","ButtonWithIncrementCount","HeadingWithIncrementCount","onMouseOver","HOCInsideRenderMethod","Enhance","Car","hello","endingMsg","EnhancedCar","hoistNonReactStatic","anotherHello","withSpeedUp","HigherOrderComponents","num","setNum","IntegratingWithOtherLibraries","Stories","PhotoStory","VideoStory","MyButton","createElement","ReactCreatElementExample","MyComponents","DatePicker","Time","Date","toLocaleDateString","FooElem","components","photo","video","StoryBasedOnProp","SpecificStory","storyType","story","Sum","sum","numbers","reduce","accumulator","currentValue","join","Test","TestDefaultProp","message","profile","msg","other","ParentComponent","MyItems","Item","todo","TodoList","Repeat","Array","fill","index","ListOfThings","numTimes","Parent","MessageList","messages","length","JSXInDepth","String","Counter","CounterButton","nextProps","nextState","setColor","floor","styles","ListOfWords","words","PureComponent","WordAdder","notMutatingWords","notMutateInputRef","push","concat","addWord","addWordNotMutate","OptimizingPerformance","min","max","randomColor","appendChild","modalRoot","Box","ReactDOM","createPortal","textAlign","Modal","el","removeChild","clicks","Child","Portals","ProfilerAPI","divRef","innerHTML","phase","actualDuration","baseDuration","startTime","commitTime","interactions","onRender","onRenderCallback","update","Reconciliation","useRef","CustomTextInput","textInput","setTextInputRef","element","focusTextInput","AnotherCustomTextInput","inputRefCallback","RefsAndTheDOM","counterRef","MouseTracker","render","mouse","anotherRender","Mouse","x","y","scroll","allow","onmousemove","scrollTop","documentElement","clientX","clientY","Koala","isShow","src","position","left","top","width","height","alt","RenderProp","StaticTypeChecking","Component1","StrictMode","ParentRequireSingleChild","defaultProps","Gender","gender","TypeCheckingWithPropTypes","NameForm","handleSubmit","defaultValue","FileInput","fileInputRef","files","UncontrolledComponents","App","TypecheckingWithPropTypes","getElementById"],"mappings":"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","file":"static/js/main.6798dba7.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport DocumentTitle from 'react-document-title';\nimport { v4 as uuid4 } from 'uuid';\n\nfunction Form() {\n    const [inputValue, setInputValue] = useState(\"\");\n    function handleSubmit(e) {\n        e.preventDefault();\n        console.log(inputValue);\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                aria-label=\"name\"\n                aria-required\n                onChange={(e) => setInputValue(e.target.value)}\n                value={inputValue}\n                name=\"name\"\n            />\n            <input type=\"submit\" />\n        </form>\n    );\n}\n// --- Semantic HTML\n// Semantic HTML is the foundation of accessibility in a web application. \n// Using the various HTML elements ro reinforce the meaning of information in our websites will often give us accessibility for free. \nfunction SemanticTag() {\n    return (\n        <div>\n            <h3>Semantic Tag</h3>\n            <base href=\"https://www.google.com\" />\n            <a href=\"#anchor\">Google</a>\n            <Glossary items={[ { term: \"Sport\", descriptions: [\"Football\", \"Tennis\"] } ]} />\n        </div>\n    );\n}\n// Sometimes we break HTML semantics when we add <div> elements to our JSX to make our React code work, \n// especially when working with lists (<ol>, <ul> and <dl>) and the HTML <table>. \n// In these cases we should rather use React Fragments to group together multiple elements. \nfunction ListItem({ item }) {\n    return (\n        <Fragment>\n            <dt>{item.term}</dt>\n            {item.descriptions.map(description => <dd key={uuid4()}>{description}</dd>)}\n        </Fragment>\n    );\n}\nfunction Glossary(props) {\n    return (\n        <dl>\n            {props.items.map(item => (\n                <ListItem key={uuid4()}  item={item} />\n            ))}\n        </dl>\n    );\n}\n// --- Accessible Forms\n// ---- Labeling \n// Every HTML form control, such as <input> and <textarea>, \n// needs to be labeled accessibly. \n// * use the label element to associate text with form element explicity. \n// * The for attribute of the label must exactly match the id of the form control. \nfunction AccessibleForm() {\n    return (\n        <Fragment>\n            <h3>Accessible Form</h3>\n            <h4>Labeling</h4>\n            <form>\n                <label htmlFor=\"hobbyInput\" aria-labelledby=\"hobbyInput\">Hobby: </label>\n                <input type=\"text\" id=\"hobbyInput\" name=\"hobby\"></input>\n            </form>\n            <h4>Notifying the user of errors</h4>\n            <p>Error situations need to be understood by all users.</p>\n        </Fragment>\n    );\n}\n// --- Focus Control\nfunction FocusControl() {\n    return (\n        <Fragment>\n            <h3 id=\"focus-control\">Focus Control</h3>\n            <h4>Keyboard focus and focus outline</h4>\n            <form>\n                <fieldset>\n                    <p>Click this form to access and then press tab to fucus control inputs that were ordered by tabIndex attribute</p>\n                    <p><code>Tab</code> for navigate forward</p>\n                    <p><code>Shift + Tab</code> for navigate backward</p>\n                    <legend>Focus control example</legend>\n                    <label>Text: </label>\n                    <input tabIndex=\"1\" type=\"text\"/><br/>\n                    <label>Item1</label>\n                    <input tabIndex=\"2\" type=\"checkbox\"/>\n                    <label>Item2</label>\n                    <input tabIndex=\"3\" type=\"checkbox\"/><br/>\n                    <button tabIndex=\"3\" type=\"button\" onClick={() => alert(\"clicked\")}>Click Me</button><br/>\n                    Reade this link about how to control by keyboard and others detail: \n                    <a title=\"Read here for more details\" href=\"https://www.webaim.org/techniques/keyboard\" tabIndex=\"4\">Keyboard Accessibility</a>\n                </fieldset>\n            </form>\n            <h4>Mechanism to skip to desired content</h4>\n            <p>Provide a meachanism to allow user to skip past navigation sections in \n            your application as this assists and speeds up keyboard navigation.</p>\n            <p>Skiplinks or Skip Navigation Links are hidden navigation links that only \n            become visible when keyboard users interect with the page.</p>\n            <h4>Programatically managing focus</h4>\n            <p>Our React applications continuously modify the HTML DOM during runtime, \n            sometimes leading to keyboard focus being lost or set to an unexpected element. \n            In order to repair this, we need to programatically nudge the keyboard focus in the right direction.</p>\n            <ParentInput />\n        </Fragment>\n    );\n}\nfunction Skiplinks(props) {\n    return (\n        <Fragment>\n            {props.children}\n        </Fragment>\n    );\n    \n}\n// Sometimes a parent component needs to set focus to an element in a child component.\nclass ParentInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputElement = React.createRef();\n    }\n    componentDidMount() {\n        this.inputElement.current.focus();\n    }\n    render() {\n        return (\n            <>\n                <ChildInput placeholder={\"Focus me...\"} inputRef={this.inputElement} />\n                <button onClick={() => alert(this.inputElement.current.value)}>Click Me</button>\n            </>\n        );\n    }\n}\nfunction ChildInput(props) {\n    return (\n        <input ref={props.inputRef} placeholder={props.placeholder} />\n    );\n}\nfunction MouseAndPointerEvents() {\n    return (\n        <Fragment>\n            <h3>Mouse and pointer events</h3>\n            <p>Ensure that all functionality exposed through a mouse or pointer event can \n            also be accessed using the keyboard alone.</p>\n            <OuterClickExample />\n            <BlurExample />\n        </Fragment>\n    );\n}\nclass OuterClickExample extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isOpen: false };\n        this.container = React.createRef();\n        this.buttonRef = React.createRef();\n    }\n    onClickOutsideHandler = (e) => {\n        if (e.target === this.buttonRef.current) {\n            return;\n        }\n        this.setState({ isOpen: false });\n    }\n    componentDidMount() {\n        window.addEventListener(\"click\", this.onClickOutsideHandler);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"click\", this.onClickOutsideHandler);\n    }\n    render() {\n        return (\n            <div ref={this.container}>\n                <h4>Example 1</h4>\n                <p>This may work fine for users with pointer devices, such as a mouse \n                , but operating this with the keyboard alone leads to broken functionality when tabbing to the next element \n                as the window object never receives a click event.</p>\n                <button ref={this.buttonRef} onClick={() => this.setState({ isOpen: !this.state.isOpen })}>Select an option</button>\n                { this.state.isOpen && (\n                    <ul className=\"outer-click-example-list\">\n                        <li>Option1</li>\n                        <li>Option2</li>\n                        <li>Option3</li>\n                    </ul>\n                )}\n                <button>Select me too</button>\n                <button>Select me too</button>\n            </div>\n        );\n    }\n}\nclass BlurExample extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isOpen: false };\n        this.timeOutId = null;\n    }\n    onBlurHandler = () => {\n        // We close the popover on the next tick by using setTimeout. \n        // This is neccessary because we need to first check if \n        // another child of the element has received focus as \n        // the blur event fires prior to the new focus event. \n        this.timeOutId = setTimeout(() => {\n            this.setState({ isOpen: false });\n        });\n    }\n    onFocusHandler = () => {\n        clearTimeout(this.timeOutId);\n    }\n    render() {\n        return (\n            <div>\n                <h4>Example 2</h4>\n                <div \n                    style={{ border: \"1px solid black\", padding: \"5px\" }}\n                    onBlur={this.onBlurHandler}\n                    onFocus={this.onFocusHandler}\n                >\n                    <button onClick={() => this.setState({ isOpen: !this.state.isOpen })}>Select an option</button>\n                    {this.state.isOpen && (\n                        <ul className=\"outer-click-example-list\">\n                            <li>Option1</li>\n                            <li>Option2</li>\n                            <li>Option3</li>\n                        </ul>\n                    )}\n                    <input></input>\n                </div>\n                <button>Select me too</button>\n                <button>Select me too</button>\n            </div>\n        );\n    }\n}\nfunction MoreComplexWidgets() {\n    return (\n        <div>\n            <h3>More Complex Widgets</h3>\n            <p>A more complex user experience should not mean \n            a less accessible one. Whereas accessibility is most easily achieved by coding as close to HTML as possible, </p>\n            even the most complex widget can be coded accessibly.\n        </div>\n    );\n}\nfunction OtherPointsForConsideration() {\n    return (\n        <div>\n            <h3>Other Points for Consideratioin</h3>\n            <h4>Setting the language</h4>\n            <p>Indicate the human language of page texts as screen reader software uses this to \n            select the correct voice setting</p>\n            <strong>For example: </strong>If you want to hello in spanish, you can say <em lang=\"es\">Hola, Como estad?</em>\n            <h4>Setting the document title</h4>\n            <p>Set the document &lt;title&gt; to correctly describe the current page content as \n            this ensures that the user remains aware of the current page context.</p>\n            <p>We can set this in React using the React Document Title Component</p>\n            <h4>Color contrast</h4>\n            <p>Ensure that all readable text on your website has sufficient color contrast to remain maximally \n            readable by users with low vision.</p>\n        </div>\n    );\n}\nfunction DevelopmentAndTestingTools() {\n    return (\n        <div>\n            <h3>Development and Testing Tools</h3>\n            <p>There are number of tools we can use to assist in the creation of accessible web application</p>\n            <h4>The keyboard</h4>\n            <p>By far the easiest and also one of the most important checks is to test if your entire website can \n            be reached and used with the keyboard alone. Do this by: </p>\n            <ol>\n                <li>Disconnecting your mouse.</li>\n                <li>Using <code>Tab</code> and <code>Shift+Tab</code> to browse.</li>\n                <li>Using <code>Enter</code> to activate elements.</li>\n                <li>Where required, using your keyboard arrow keys to interact with some element, \n                such as menus and dropdowns.</li>\n            </ol>\n            <h4>Development assistance</h4>\n            \n        </div>\n    );\n}\n\n\n\nclass Accessibility extends React.Component {\n    render() {\n        return (\n            <DocumentTitle title=\"Accessibility\">\n            <div>\n                <Skiplinks>\n                <base href=\"#\" />\n                    <a href=\"#focus-control\">Skip to Focus Control</a>\n                </Skiplinks>\n                <h2>Accessibility</h2>\n                <Form />\n                <SemanticTag />\n                <AccessibleForm />\n                <FocusControl />\n                <MouseAndPointerEvents />\n                <MoreComplexWidgets />\n                <OtherPointsForConsideration />\n                <DevelopmentAndTestingTools />\n            </div>\n            </DocumentTitle>\n        );\n    }\n}\n\nexport default Accessibility;","import React, { Suspense, useState } from 'react';\n\nfunction CodeSplitting() {\n    const [result, setResult] = useState(0);\n    const inputRefA = React.createRef();\n    const inputRefB = React.createRef();\n    async function getResult(inputA, inputB) {\n        const res = await import('./otherComponents/math').then(math => math.add(+inputA.current.value, +inputB.current.value));\n        setResult(res);\n    }\n    const ExampleReactLazyComponent = React.lazy(() => import('./otherComponents/ExampleReactLazyComponent'));\n    const Hello = React.lazy(() => import('./otherComponents/ExampleReactLazyComponent').then(module => (\n        { default: module.Hello }\n    )));\n    const Hello2 = React.lazy(() => import('./otherComponents/Manage'));\n    const Hola = React.lazy(() => import('./otherComponents/ExampleReactLazyComponent').then(module => (\n        { default: module.Hola }\n    )));\n    return (\n        <div>\n            <h2>Code-Splitting</h2>\n            <h3>Bundling</h3>\n            <p>Most React apps will have their files \"bundled\" using tools like Webpack, Rollup or Browserify. \n            Bundling is the process of following imported files and merging them into a single file: a \"bundle\". \n            This bundle can then be included on a webpage to load entire app at once.</p>\n            <h3>Code Splitting</h3>\n            <p>Budling is great, but as your app grows, your bundle will grow too. \n            Especially if you are including large third-party libraries. \n            You need to keep an eye on the code you are including in your bundle so that you don't accidentally make it so large that your app takes a long time to load.</p>\n            <strong>Example import add function from 'math.js' file: </strong>\n            <input className=\"math-input\" ref={inputRefA} /> + <input className=\"math-input\" ref={inputRefB} /> = <span>{result ? result : \"\"}</span>\n            <button onClick={() => getResult(inputRefA, inputRefB)}>Solve</button>\n            <h3>React.lazy</h3>\n            <p>The React.lazy function lets you render a dynamic import as a regular component.</p>\n            <Suspense fallback={<div>Loading...</div>}>\n                <ExampleReactLazyComponent />\n                <div>Test</div>\n                <Hello />\n                <Hello2 />\n                <Hola />\n            </Suspense>\n            <p>The lazy component should then be rendered inside a Suspense component, \n            which allow us to show some fallback content (such as a loading indicator) while we're waiting for the lazy component to load.</p>\n            <h3>Error boundaries</h3>\n            <p>If the other module fails to load (for example, due to network failure), \n            it will trigger an error. you can handle these errors to show a nice user experience and manage recovery with \n            Error Boundaries. Once you've created your Error Boundary, you can use it anywhere above your lazy components to display an error state \n            when there's a network error.</p>\n            <h3>Route-based code splitting</h3>\n            <h3>Named Exports</h3>\n            <p>React.lazy currently only supports default exports. \n            If the module you want to import uses named exports, you can create an \n            intermediate module that reexports it as the default. This ensures that tree shaking keeps working and that you don't pull in unused components.</p>\n        </div>\n    );\n}\n\n\nexport default CodeSplitting;","import React from 'react';\n\nconst themes = {\n    light: {\n        foreground: \"#000\",\n        background: \"#eee\",\n    },\n    dark: {\n        foreground: \"#fff\",\n        background: \"#222\",\n    }\n};\nconst ThemeContext = React.createContext({ \n    theme: themes.dark,\n    toggleTheme: function() {}\n});\n\nexport { ThemeContext, themes };\n","import React from 'react';\nimport { ThemeContext } from './theme-context';\n\nclass ThemedButton extends React.Component {\n    render() {\n        let props = this.props;\n        let theme = this.context.theme;\n        return (\n            <button \n                {...props}\n                style={{ color: theme.foreground, backgroundColor: theme.background }}\n                onClick={this.context.toggleTheme}\n            >{props.children}</button>\n        );\n    }\n}\nThemedButton.contextType = ThemeContext;\n\nexport default ThemedButton;","import React from 'react';\nimport ThemedButton from './themed-button';\nimport { ThemeContext, themes } from './theme-context';\n\nfunction Toolbar(props) {\n    return (\n        <ThemedButton onClick={props.onclick}>\n            Change Theme\n        </ThemedButton>\n    );\n}\n\nclass Area extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeTheme = this.changeTheme.bind(this);\n        this.state = {\n            theme: themes.light,\n            toggleTheme: this.changeTheme,\n        }\n    }\n    changeTheme() {\n        const changeToTheme = this.state.theme === themes.light ? themes.dark : themes.light;\n        this.setState({ theme: changeToTheme });\n    }\n    render() {\n        return (\n            <div style={{ backgroundColor: this.state.theme.background, padding: \"20px\" }}>\n                <ThemeContext.Provider value={this.state}>\n                    <Toolbar />\n                </ThemeContext.Provider>\n            </div>\n        );\n    }\n}\n\nexport default Area;","import React, { useState } from 'react';\nimport Area from './otherComponents/area';\n// Context lets us pass a value deep into the component tree\n// without explicity threading it through every component. \n// Create a context for the current theme (with \"light\" as default)\n// * The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. \n\nconst ThemeContext = React.createContext({ theme: \"LIGHT\" });\nconst UserContext = React.createContext( {name: \"Guest\" });\nUserContext.displayName = \"UserContext\";\nfunction Toobar() {\n    const [theme, setTheme] = useState(\"DARK\");\n    function handleChange(e) {\n        setTheme(e.target.value);\n    }\n    return (\n        <>\n            <input type=\"radio\" name=\"theme\" value=\"DARK\" checked={theme===\"DARK\"} onChange={handleChange} />\n            <label>Dark theme</label>\n            <input type=\"radio\" name=\"theme\" value=\"LIGHT\" checked={theme===\"LIGHT\"} onChange={handleChange} />\n            <label>Light theme</label><br />\n            <ThemeContext.Provider value=\"overriden value\">\n                <ThemeContext.Provider value={{ theme }}>\n                    <ThemedButton />\n                </ThemeContext.Provider>\n            </ThemeContext.Provider>\n        </>\n    );   \n}\nclass ThemedButton extends React.Component {\n    // static contextType = ThemeContext;\n    changeTheme = () => {\n        if (this.context.theme === \"DARK\") {\n            document.body.style.background = \"black\";\n            document.body.style.color = \"white\";\n        } else {\n            document.body.style.background = \"white\";\n            document.body.style.color = \"black\";\n        }\n    }\n    componentDidMount() {\n        console.log(\"componentDidMount: \", this.context);\n        this.setState({ changeThemeTo: this.context.theme });\n    }\n    componentDidUpdate() {\n        console.log(\"componentDidUpdate: \", this.context);\n    }\n    render() {\n        return (\n            <button onClick={this.changeTheme}>Change theme to {this.context.theme}</button>\n        );\n    }\n}\nThemedButton.contextType = ThemeContext;\nfunction LoginPage() {\n    const [lastGuest, setLastGuest] = useState({ name: \"Guest\" });\n    const userInputRef = React.createRef();\n    function onSubmmitHandler() {\n        if (userInputRef.current.value === \"\") {\n            return;\n        }\n        setLastGuest({ name: userInputRef.current.value });\n        userInputRef.current.value = \"\";\n        userInputRef.current.focus();\n    }\n    return (\n        <UserContext.Provider value={lastGuest}>\n            <Form ref={{ userInputRef }} onSubmit={onSubmmitHandler} legend=\"Login\" label={{ username: \"UserName\", password: \"Password\" }} />\n        </UserContext.Provider>\n    );\n}\nconst Form = React.forwardRef((props, ref) => {\n    return (\n        <UserContext.Consumer>\n            {obj => (\n                <form onSubmit={e => {\n                    e.preventDefault();\n                    props.onSubmit();\n                }}>\n                    <fieldset>\n                        <legend>{props.legend}</legend>\n                        <label>{props.label.username}: </label>\n                        <input placeholder={`${obj.name}...`} ref={ref.userInputRef} /><br />\n                        <label>{props.label.password}: </label>\n                        <input /><br />\n                        <input type=\"submit\" />\n                    </fieldset>\n                </form>\n            )}\n        </UserContext.Consumer>\n    );\n});\nconst CoinContext = React.createContext(50);\nconst UsernameContext = React.createContext(\"Guest\");\nclass ShoppingPage extends React.Component {\n    render() {\n        return (\n            <UserTab />\n        );\n    }\n}\nclass UserTab extends React.Component {\n    render() {\n        return (\n            <UserStatus />\n        );\n    }\n}\nclass UserStatus extends React.Component {\n    render() {\n        return (\n            <UsernameContext.Consumer>\n                {username => (\n                    <CoinContext.Consumer>\n                        {coin => (\n                            <div>\n                                <div>name: {username}</div>\n                                <div>coin: {coin}</div>\n                            </div>\n                        )}\n                    </CoinContext.Consumer>\n                )}\n            </UsernameContext.Consumer>\n        );\n    }\n}\nconst CaveatExampleContext = React.createContext({ something: \"something\" });\nfunction CaveatExample() {\n    const [number, setNumber] = useState(Math.random().toFixed(2));\n    return (\n        <React.Fragment>\n            <CaveatExampleContext.Provider value={\"contextValue\"}>\n                <CaveatExampleChild />\n            </CaveatExampleContext.Provider>\n            <span>number: {number} </span>\n            <button onClick={() => setNumber(Math.random().toFixed(2))}>Change number</button>\n        </React.Fragment>\n    );\n}\nfunction CaveatExampleChild() {\n    return (\n        <CaveatExampleLastChild />\n    )\n}\nfunction CaveatExampleLastChild() {\n    console.log(\"re-render\");\n    return (\n        <CaveatExampleContext.Consumer>\n            {obj => (\n                <div>Context: {obj.something}</div>\n            )}\n        </CaveatExampleContext.Consumer>\n    );\n}\n\nfunction Context() {\n    return (\n        <div>\n            <h2>Context</h2>\n            <p>Context provide a way to pass data through the component tree without \n            having to pass props down manually at every level.</p>\n            <p>In a typical React application, data is passed top-down (parent to child) via props, \n            but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) \n            that are required by many components within an application. \n            Context provides a way to share values like these between components without having to explicity pass a \n            prop through every level of the tree.</p>\n            <h3>When to Use Context</h3>\n            <p>Context is designed to share data that can be considered \"global\" for a tree of React components, \n            such as the current authenticated user, theme, or preferred language.</p>\n            <Toobar />\n            <LoginPage />\n            <h3>API</h3>\n            <ul>\n                <li>React.createContext</li>\n                <li>React.Provider</li>\n                <li>Class.contextType</li>\n                <li>or set <code>static contextType = Mycontext inside the class</code></li>\n                <li>Context.Consumer</li>\n                <li>Context.displayName</li>\n                <p>Context object accepts a displayName string property. \n                React DevTools uses this string to determine what to display for the context. </p>\n            </ul>\n            <h3>Example: Dynamic Context</h3>\n            <Area />\n            <h3>Updating Context from a Nested Component</h3>\n            <p>It is often neccesary to update the context from a component \n            that is nested somewhere deeply in the component tree. In this case you can pass a function down through \n            the context to allow consumers to update the context.</p>\n            <h3>Consuming Multiple Contexts</h3>\n            <p>To keep context re-rendering fast, React needs to make each context consumer a separate node in the tree.</p>\n            <ShoppingPage />\n            <h3>Caveats</h3>\n            <p>Because context uses reference identity to determine when to re-render, \n            there are some gotchas that could trigger unintentional renders in consumers \n            when a provider's parent re-renders.</p>\n            <p>To get around this, lift the value in to the parent's state.</p>\n            <CaveatExample />\n        </div>\n    );\n}\n\nexport default Context;","import React from 'react';\n\nclass ErrorBoundaryComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null, \n            errorInfo: null,\n            hasError: false,\n        }\n    }\n    static getDerivedStateFromError(error) {\n        // When ther is an arror, go to this function first and then go to ComponentDidCatch.\n        console.log(\"getDerivedStateFromError: \", \"error\");\n        // Update state so the next render will show the fallback UI. \n        return { hasError: true };\n    }\n    componentDidCatch(error, errorInfo) {\n        console.log(\"componentDidCatch: \", \"error\");\n        this.setState({\n            error: error,\n            errorInfo: errorInfo,\n        })\n    }\n    render() {\n        console.log(\"hasError: \", this.state.hasError);\n        if (this.state.hasError && this.state.errorInfo) {\n            return (\n                <div>\n                    <h4>Something went wrong.</h4>\n                    <details>\n                        {this.state.error && this.state.error.toString()}\n                        <br />\n                        {this.state.errorInfo.componentStack}\n                    </details>\n                </div>\n            );\n        }\n        return this.props.children;\n    }\n}\nclass BuggyCounter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0,\n        }\n    }\n    handleClick = () => {\n        this.setState(state => ({ counter: state.counter + 1 }));\n    }\n    render() {\n        if (this.state.counter === 5) {\n            throw new Error(\"I crashed!\");\n        }\n        return (\n            <h4 style={{cursor: \"pointer\", display: \"inline\", fontSize: \"xx-large\"}} onClick={this.handleClick}>{this.state.counter}</h4>\n        );\n    }\n}\nfunction ErrorBoundaryExample() {\n    return (\n        <div>\n            <h4>This is an example of error boundaries in React 16.</h4>\n            <h4>Click on the numbers to increase the counters.</h4>\n            <h4>The counter is programmed to throw when it reaches 5.</h4>\n            <div style={{ color: \"green\" }}>\n            <h4>Example 1</h4>\n                <p>These two counters are inside the same error boundary. \n                If one crashes, the error boundary will replace both of them.</p>\n                <ErrorBoundaryComponent>\n                    <BuggyCounter /><br />\n                    <BuggyCounter />\n                </ErrorBoundaryComponent>\n            </div>\n            <div style={{ color: \"blue\" }}>\n                <h4>Example 2</h4>\n                <p>These two counters are each inside of their own error boundary. \n                So if one crashes, the other is not affected.</p>\n                <ErrorBoundaryComponent><BuggyCounter /></ErrorBoundaryComponent><br />\n                <ErrorBoundaryComponent><BuggyCounter /></ErrorBoundaryComponent>\n            </div>\n        </div>\n    );\n}\n\nfunction ErrorBoundaries() {\n    return (\n        <div>\n            <h2>Error Boundaries</h2>\n            <ErrorBoundaryExample />\n            <h3>Where to Place Error Boundaries</h3>\n            <p>The granularity of error boundaries is up to you. \n            You may wrap top-level route components to display a \"Something went wrong\" message to the user, \n            just like server-side frameworks often handle crashes. \n            You may also wrap individual widgets in an error boundary to protect them from crashing the rest ot the application.</p>\n            <h3>New Behavior for Uncaught Errors</h3>\n            <p>As of React 16, errors that were not caught by \n            any error boundary will result in unmounting of the whole React component tree.</p>\n        </div>\n    );\n}\n\nexport default ErrorBoundaries;","import React, { useEffect, useState } from 'react';\n\nconst FancyButton = React.forwardRef( function myFunction(props, ref) {\n    return <button ref={ref} {...props}>{props.children}</button>\n});\n\nconst AnotherButton = React.forwardRef((props, ref) => {\n    return <button {...props} ref={ref}>{props.children}</button>;\n});\n\nfunction FancyButtonParent() {\n    const buttonRef = React.createRef();\n    useEffect(() => {\n        buttonRef.current.focus();\n    });\n    return (\n        <FancyButton ref={buttonRef}>Focus me first!</FancyButton>\n    );\n}\n\nfunction logProps(WrappedComponent) {\n    class LogProps extends React.Component {\n        componentDidUpdate(prevProps) {\n            console.log(\"old props: \", prevProps);\n            console.log(\"new props: \", this.props);\n        }\n        render() {\n            const {forwardedRef, ...rest} = this.props;\n            return <WrappedComponent ref={forwardedRef} {...rest} />\n        }\n    }\n    function forwardRef(props, ref) {\n        return <LogProps {...props} forwardedRef={ref} />;\n    }\n    // You can even set the function's displayName property to include the component you're wrapping\n    const name = WrappedComponent.displayName || WrappedComponent.name;\n    console.log(WrappedComponent);\n    forwardRef.displayName = `logProps(${name})`;\n    return React.forwardRef(forwardRef);\n}\nconst Elem = logProps(AnotherButton);\n// set displayName of Elem component\nElem.displayName = \"AnotherButton\";\nfunction LogPropsExample() {\n    const [count, setCount] = useState(0);\n    const myRef = React.createRef();\n    useEffect(() => {\n        myRef.current.style.color = \"red\";\n    });\n    return (\n        <React.Fragment>\n            <span>{count} </span>\n            <Elem ref={myRef} count={count} onClick={() => setCount(count + 1)}>ADD</Elem>\n        </React.Fragment>\n    );\n}\n\nclass ForwardingRefs extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Forwarding Refs</h2>\n                <p>Ref forwarding is a technique for automatically passing a ref \n                through a component to one of its children. This is typically not neccessay for most \n                components in the application. However, it can be useful for some kinds of components, \n                especailly in reusable component libraries.</p>\n                <h3>Forwarding refs to DOM components</h3>\n                <FancyButtonParent />\n                <h3>Note for component library maintainers</h3>\n                <p><strong>When you start using forwardRef in a component library, \n                you should treat it as a breaking change and release a new major version of your library.</strong></p>\n                <h3>Forwarding refs in higher-order components</h3>\n                <LogPropsExample />\n                <h3>Displayin a custom name in DevTools</h3>\n                <p>React.forwardRef accepts a render function. \n                React DevTools uses this function to determine what to display for the ref forwarding component.</p>\n            </div>\n        );\n    }\n}\n\nexport default ForwardingRefs;","import React from 'react';\n\nfunction Family() {\n    return (\n        <React.Fragment>\n            <div>Example: Family's member</div>\n            <div>Dad</div>\n            <div>Mom</div>\n            <div>Son</div>\n            <div>Daughter</div>\n        </React.Fragment>\n    );\n}\nfunction Columns(props) {\n    if (props.type === \"header\") {\n        return (\n            <React.Fragment>\n                <th>Column1</th>\n                <th>Column2</th>\n            </React.Fragment>\n        );\n    }\n    return (\n        <React.Fragment>\n            <td>Data</td>\n            <td>Data</td>\n        </React.Fragment>\n    );\n}\n\nfunction Table() {\n    return (\n        <>\n            <div>Example: Table</div>\n            <table>\n                <thead>\n                    <tr><Columns type=\"header\" /></tr>\n                </thead>\n                <tbody>\n                    <tr><Columns  /></tr>\n                </tbody>\n            </table>\n        </>\n    );\n}\n\n\nclass Fragments extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Fragments</h2>\n                <p>A common pattern in React is for a component to return \n                multiple elements. Fragments let you group a list of children without addin extra nodes to the DOM.</p>\n                <Family />\n                <h3>Motivation</h3>\n                <p>A common pattern is for a component to return a list of children.</p>\n                <Table />\n                <h3>Keyed Fragments</h3>\n                <p>Fragments declared with the explicit &lt;React.Fragment&gt; syntax may have keys. \n                A use case for this is mapping a collection to an array of fragments.</p>\n            </div>\n        );\n    }\n}\n\nexport default Fragments;","import React, { useState } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nfunction Greeting(props) {\n    return (\n        <React.Fragment>\n            <input placeholder=\"Name...\" name=\"name\" onChange={props.onChange} /><br />\n            <span>{props.greetingMsg}</span><br />\n        </React.Fragment>\n    );\n}\nfunction generateGreeting(WrappedComponent, getGreeting) {\n    return class extends React.Component {\n        constructor(props) {\n            super(props);\n            this.handleChange = this.handleChange.bind(this);\n            this.state = {\n                name: \"\",\n            }\n        }\n        handleChange(e) {\n            const { name, value } = e.target;\n            this.setState({\n                [name]: value,\n            });\n        }\n        render() {\n            return (\n                <WrappedComponent onChange={this.handleChange} greetingMsg={getGreeting(this.state.name)}  />\n            );\n        }\n    }\n}\nconst HelloGreeting = generateGreeting(Greeting, (name) => `Hello ${name}, How are you doing?`);\nconst HolaGreeting = generateGreeting(Greeting, (name) => `Hola ${name}, Como estad?`);\nfunction withIncrementCount(WrappedComponent, displayName) {\n    class EnhancedComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                count: 0\n            }\n        }\n        incrementCount = () => {\n            this.setState(prevState => ({ count: prevState.count + 1 }))\n        }\n        render() {\n            const { age, ...rest } = this.props;\n            return (\n                <WrappedComponent count={this.state.count} incrementCount={this.incrementCount} {...rest} />\n            );\n        }\n    }\n    EnhancedComponent.displayName = displayName;\n    return EnhancedComponent;\n}\nfunction Button(props) {\n    return (\n        <button onClick={props.incrementCount}>Clicked {props.count} time.</button>\n    );\n}\nconst ButtonWithIncrementCount = withIncrementCount(Button, \"ButtonWithIncrementCount\");\nfunction Heading(props) {\n    const styles = { display: \"inline-block\", cursor: \"pointer\" };\n    return (\n        <h4 style={{...styles}} onMouseOver={props.incrementCount}>{props.name} hovered {props.count} time.</h4>\n    )\n}\nconst HeadingWithIncrementCount = withIncrementCount(Heading, \"HeadingWithIncrementCount\");\nclass HOCInsideRenderMethod extends React.Component {\n    render() {\n        const Enhance = withIncrementCount(Button, \"HOCInsideRender\");\n        return (\n            <Enhance />\n        );\n    }\n}\nclass Car extends React.Component {\n    static hello() {\n        return \"Hello, How are you doing?\";\n    }\n    hi() {\n        return \"Hi\";\n    }\n    static anotherHello() {\n        return \"Hello again.\";\n    }\n    render() {\n        return (\n            <div>\n                <h5>{this.props.greetingMsg || Car.hello()}, I am a car component.{this.props.endingMsg}</h5>\n            </div>\n        );\n    }\n}\nfunction withSpeedUp(WrappedComponent, endingMsg) {\n    class EnhancedComponent extends React.Component {\n        render() {\n            \n            return (\n                <WrappedComponent greetingMsg={EnhancedComponent.hello()} endingMsg={this.props.endingMsg} />\n            );\n        }\n    }\n    // you could copy the methods onto the container before returning it\n    EnhancedComponent.hello = WrappedComponent.hello;\n    console.log(typeof EnhancedComponent.hello === \"undefined\");\n    // you can use hoist-non-react-statics to automatically copy all non-React static methods\n    hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n    console.log(typeof EnhancedComponent.anotherHello === \"undefined\");\n    return EnhancedComponent;\n}\nconst EnhancedCar = withSpeedUp(Car);\n\nfunction HigherOrderComponents() {\n    const [num, setNum] = useState(0);\n    return (\n        <div>\n            <h2>Higher-OrderComponents</h2>\n            <button onClick={() => setNum(Math.random())}>REFRESH</button><span style={{ display: \"none\" }}>{num}</span>\n            <p>A higher-order component (HOC) is an advanced technique in React \n            for reusing component logic. HOCs are not part of the React API, per se. \n            They are a pattern that emerges from React's compositional nature.</p>\n            <HelloGreeting />\n            <HolaGreeting /><br />\n            <ButtonWithIncrementCount name=\"Chondan\" age={22} /><br />\n            <HeadingWithIncrementCount name=\"Chondan\" /><br />\n            <h3>Don't Use HOCs Inside the render Methond</h3>\n            <p>If the component returned from render is indentical (===) to the component from the previous render, React recursively \n            updates the subtree by diffing it with the new one. \n            If they're not equal, the previous subtree is unmounted completely.</p>\n            <strong>Example: Click the button and then click REFRESH button on the top and see what's happend.</strong><br />\n            <HOCInsideRenderMethod />\n            <h3>Static Method Must Be Copied Over</h3>\n            <Car />\n            <EnhancedCar endingMsg=\"I' am faster.\" />\n        </div>\n    );\n}\n\nexport default HigherOrderComponents;","import React from 'react';\n\nclass IntegratingWithOtherLibraries extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Integrating with Other Libraries</h2>\n                <p>React can be used in any web appication. \n                It can be embedded in other applications and, \n                with a little care, other applications can be embedded in React. \n                </p>\n            </div>\n        );\n    }\n}\n\nexport default IntegratingWithOtherLibraries;","import React from 'react';\n\nconst Stories = {\n    PhotoStory: function PhotoStory() {\n        return <div>Hi, I am a PhotoStory.</div>;\n    },\n    VideoStory: function PhotoStory() {\n        return <div>Hi, I am a VideoStory.</div>;\n    }\n}\n\nexport default Stories;\n","import React from 'react';\nimport Stories from './OtherComponents/stories';\n\nconst MyButton = React.createElement(\"button\", { color: \"red\" }, \"Click me!\");\nconst ReactCreatElementExample = React.createElement(\"div\", { color: \"blue\", style: {color: \"blue\"} }, MyButton, <br />, <span>Example: React.CreatElement()</span>);\nconsole.log(ReactCreatElementExample.props);\n// --- Using Dot Notation for JSX Type\nconst MyComponents = {\n    DatePicker: function DatePicker(props) {\n        return <div>Imagine a {props.color} datepicker here.</div>\n    },\n    Time: <div>Today is { new Date().toLocaleDateString() }</div>\n}\nfunction Foo(props) {\n    return <div style={props.style}>{props.children}, How are you?</div>\n}\nconst FooElem = React.createElement(Foo, { style: { color: \"yellow\", backgroundColor: \"green\" } }, \"Hi\");\n// --- User-Defined Components Must Be Capitalized\nfunction hello() {\n    return <button>Hello, I was assigned to a new capitalized variable</button>;\n}\n// Or, assign it to a Capitalized variable\nconst Hello = hello;\n// --- Chossing the Type at Runtime\nconst { PhotoStory, VideoStory } = Stories;\nconst components = {\n    photo: PhotoStory,\n    video: VideoStory,\n};\nfunction StoryBasedOnProp(props) {\n    const SpecificStory = components[props.storyType];\n    return <SpecificStory story={props.story} />\n}\nconst curlyBrace = '{}';\n// --- Props in JSX\n// --- JavaScript Expressions as Props\nfunction Sum(props) {\n    const sum = props.numbers.reduce((accumulator, currentValue) => accumulator + currentValue);\n    return <div>{props.numbers.join('+ ')} = {sum}</div>\n}\nfunction Test(props) {\n    if (props.TestDefaultProp) {\n        return <div>Test, props defalut to \"true\"</div>\n    }\n    return <div>Test, {props.message}</div>\n}\nconst profile = { name: \"Chondan\", age: 22 };\nfunction Greeting(props) {\n    return <div>Hello, My name is {props.name}, I am {props.age} years old.</div>\n}\nconst Button = props => {\n    const { msg, ...other } = props;\n    const { name } = other;\n    return <button onClick={() => alert(`Hi ${name}, ` + msg)} {...other}>Click Me!</button>\n}\nfunction ParentComponent(props) {\n    return <div>{props.children}</div>\n}\nfunction MyItems() {\n    // No need to wrap list items in an extra element!\n    return [\n        <li key=\"1\">Item 1</li>,\n        <li key=\"2\">Item 2</li>,\n        <li key=\"3\">Item 3</li>\n    ]\n}\nfunction Item(props) {\n    return <li>{props.todo}</li>;\n}\nfunction TodoList() {\n    const todos = [\"finish doc\", \"submit pr\", \"playing football\"];\n    return (\n        <ul>\n            {todos.map(todo => <Item key={todo} todo={todo} />)}\n        </ul>\n    )\n}\nfunction Repeat(props) {\n    const items = Array(10).fill(null).map((item, index) => props.children(index));\n    return (\n        <div>\n            {items}\n        </div>\n    );\n}\nfunction ListOfThings(props) {\n    return (\n        <Repeat numTimes={props.numTimes}>\n            {(index) => <div key={index}>This is item {index} in the list.</div>}\n        </Repeat>\n    );\n}\nfunction Parent(props) {\n    return (\n        <div>\n            {props.children[1]}\n        </div>\n    )\n}\nfunction MessageList(props) {\n    return ( \n        props.messages.length > 0 && \n        <div>\n            {props.messages.map(msg => <div key={msg}>{msg}</div>)}\n        </div>\n    );\n}\n\n\n\nclass JSXInDepth extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>JSX In Depth</h2>\n                {ReactCreatElementExample}\n                <h3>Specifying The React Element Type</h3>\n                <p>Capitalized types indicate that the JSX tag is referring to a React Component.</p>\n                <h4>React Must Be in Scope</h4>\n                <p>Since JSX compiles into calls to React.createElement, \n                the React library must also always be in scope from your JSX code.</p>\n                <p>If you don't use a JavaScript bundler and loaded React from a &lt;script&gt; tag, \n                it is already in scope as the React global.</p>\n                <h4>Using Dot Notation for JSX Type</h4>\n                <p>You can also refer to a React component using dot-notation from within JSX.</p>\n                <MyComponents.DatePicker color=\"blue\" />\n                {MyComponents.Time}\n                <h4>User-Defined Components Must Be Capitalized</h4>\n                <p>When an element type starts with a lowercase letter, it refers to a \n                built-in component like &lt;div&gt; or &lt;span&gt; and resulting in a string 'div' or 'span' \n                passed to React.createElement </p>\n                {FooElem}\n                <p>Or, assign user-defined component with lowercase letter to a new capitalized variable.</p>\n                <Hello />\n                <h4>Chossing the Type at Runtime</h4>\n                <p>You cannot use a general expression as the React element type. \n                If you do want to use a general expression to indicate the type of the element, just assign it to a capitalized variable first. \n                This often comes up when you want to render a different component based on a prop.</p>\n                <StoryBasedOnProp storyType=\"photo\" />\n                <StoryBasedOnProp storyType=\"video\" />\n                <h3>Props in JSX</h3>\n                <p>There are several different ways to specify props in JSX.</p>\n                <h4>JavaScript expression as Props</h4>\n                <p>You can pass any JavaScript expression as a prop, by surrounding it with {curlyBrace}</p>\n                <Sum numbers={[1, 2, 3, 4, 5]} />\n                <h4>String Literals</h4>\n                <Test message=\"Hello world\" />\n                <Test message={\"Hello world\"} />\n                <p>When you pass a string literal, its value is HTML-unescaped.</p>\n                <h4>Props Default to \"True\"</h4>\n                <p>If you pass no value for a prop, it defalut to true.</p>\n                <Test TestDefaultProp={false} />\n                <Test TestDefaultProp />\n                <h4>Spread Attributes</h4>\n                <p>If you already have props as an object, and you want to pass it in JSX, \n                you can use ... as a \"spread\" operator to pass the whole props object.</p>\n                <Greeting {...profile} />\n                <Greeting name=\"Mohamed Salah\" age=\"28\" />\n                <p>You can also pick specific props that your component will consume while passing all other props using the spread operator.</p>\n                <Button msg=\"How are you doing?\" name=\"Chondan\" />\n                <h3>Children in JSX</h3>\n                <p>In JSX expressions that contain both an opening tag and a closing tag, \n                the content between those tag is passed as a special prop: props.children. \n                There are several different ways to pass children.</p>\n                <h4>String Literals</h4>\n                <ParentComponent>Hello World!</ParentComponent>\n                <p>JSX removes whitespace at the beginning and ending of a line. \n                It also removes blank lines. New lines adjacent to tags are removed: new lines \n                that occur in the middle of string literals are condensed into a single space.</p>\n                <p>These three phrases below were written in different way but its give us the same result as you can see.</p>\n                <ParentComponent>\n                    Hello World\n                </ParentComponent>\n                <ParentComponent>\n                    Hello\n                    World\n                </ParentComponent>\n                <ParentComponent>\n\n                    Hello World\n                </ParentComponent>\n                <h4>JSX Children</h4>\n                <p>You can provide more JSX elements as the children.</p>\n                <ParentComponent>\n                    <ParentComponent>Hello</ParentComponent>\n                    <ParentComponent>Hello again</ParentComponent>\n                </ParentComponent>\n                <p>A React component can also return an array of elements.</p>\n                <ul>\n                    <MyItems />\n                </ul>\n                <h4>JavaScript Expressions as Children</h4>\n                <p>You can pass any JavaScript expression as children, by enclsoing it within {curlyBrace}.</p>\n                <p>This is often useful for rendering a list of JSX expressions of arbitrary length.</p>\n                <TodoList />\n                <h4>Functions as Children</h4>\n                <p>Normally, JavaScript expressions inserted in JSX will evaluate to a string, a React element, or a list of those things. \n                However, props.children works justi like any other prop in that it can pass any sort of data, \n                not just the sorts that React knows how to render. </p>\n                <ListOfThings numTimes={10} />\n                <p>props.children returned an array of children</p>\n                <Parent>\n                    <button>Click me</button>\n                    <div>Hello, I am children number 1 (props.children[1]).</div>\n                </Parent>\n                <h4>Booleans, Null and Undefined Are Ignored</h4>\n                <p>false, null, undefined, and true are valid children. \n                They simply don't render.</p>\n                <p>This can be useful to conditionally render React elements.</p>\n                <p>One caveat is that some \"falsy\" values, such as the 0 number, are still rendered by React.</p>\n                <MessageList messages={[\"Hi\", \"What's up?\"]} />\n                <p>Conversely, if you want a value like false, true, null or undefined to appear in the output, \n                you have to convert it to a string first.</p>\n                <p>My JavaScript variable is {String(true)}.</p>\n            </div>\n        );\n    }\n}\n\nexport default JSXInDepth;","import React, { useState } from 'react';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n    if (count < 10) {\n        return (\n            <button onClick={() => setCount(count + 1)}>Clicked {count} time</button>\n        );\n    }\n    return false;\n}\n// --- Avoid Reconciliation\nclass CounterButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            random: 0,\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.random !== nextState.random) {\n            return true;\n        }\n        return false;\n    }\n    handleClick() {\n        this.props.setColor();\n        this.setState(state => ({ random: Math.floor(Math.random() * 5) + 1 }));\n    }\n    render() {\n        const styles = { backgroundColor: this.props.color };\n        return (\n            <button style={styles} onClick={this.handleClick.bind(this)}>Random: {this.state.random}</button>\n        );\n    }\n}\n// --- React.PureComponent\nclass ListOfWords extends React.PureComponent {\n    render() {\n        return (\n            <div>List of words: {this.props.words.join(', ')}</div>\n        );\n    }\n}\nclass WordAdder extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            words: [\"test\", \"hello\", ],\n            notMutatingWords: [\"test\", \"hello\"],\n        }\n        this.inputRef = React.createRef();\n        this.notMutateInputRef = React.createRef();\n    }\n    addWord() {\n        const words = this.state.words;\n        words.push(this.inputRef.current.value);\n        this.setState({ words: words });\n    }\n    addWordNotMutate() {\n        this.setState(state => (\n            { notMutatingWords: state.notMutatingWords.concat([this.notMutateInputRef.current.value]) }\n        ));\n    }\n    render() {\n        return (\n            <div>\n                <div>Example 1: Mutating data</div>\n                <input ref={this.inputRef} type=\"text\" />\n                <button onClick={this.addWord.bind(this)}>Add</button>\n                <div>New array: {this.state.words.join(', ')}</div>\n                <ListOfWords words={this.state.words} />\n                <p>The component won't update because the old and new values of state will compare as equal, \n                even though the actual words in the array have changed.</p>\n                <div>Example 2: Not mutating data</div>\n                <input ref={this.notMutateInputRef} type=\"text\" />\n                <button onClick={this.addWordNotMutate.bind(this)}>Add</button>\n                <div>New array: {this.state.notMutatingWords.join(', ')}</div>\n                <ListOfWords words={this.state.notMutatingWords} />\n                <p>The simplest way to avoid this problem is to avoid mutating values that you are using as props or state. \n                For example, the handleClick method above could be rewritten using concat. \n                ES6 also supports a spread syntax for arrays which can make this easier.</p>\n            </div>\n        );\n    }\n}\n\nclass OptimizingPerformance extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            color: \"#ddd\",\n        }\n    }\n    random(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    randomColor() {\n        return this.random(0, 255);\n    }\n    setColor() {\n        this.setState({ color: `rgb(${this.randomColor()},${this.randomColor()},${this.randomColor()})`})\n    }\n    render() {\n        return (\n            <div>\n                <h2>Optimizing Performance</h2>\n                <p>Internally, React uses several clever techniques to minimize the number of costly DOM \n                operations required to update the UI. \n                For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. \n                Nevertheless, there are several ways you can speed up your React application.</p>\n                <h3>Use the Production Build</h3>\n                <p>If you're benchmarking or experiencing performance problems in your React apps, \n                make sure you're testing with the minified production build.</p>\n                <Counter />\n                <p>This button will be unmounted when it reached 10.</p>\n                <h3>Avoid Reconciliation</h3>\n                <CounterButton setColor={this.setColor.bind(this)} color={this.state.color} />\n                <p>This button will never be updated if it got the same random number. (notice the color of the button)</p>\n                <h4>React.PureComponent</h4>\n                <p>Most of the time, you can use React.PureComponent instead of writing your own shouldComponentUpdate. \n                It only does a shallow comparison, so you can't use it if the props or state may have been mutated in a way that \n                a shallow comparison would miss.</p>\n                <WordAdder />\n            </div>\n        );\n    }\n}\n\nexport default OptimizingPerformance;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst container = document.createElement('div');\ncontainer.id = \"container\";\ncontainer.title = \"container\";\ncontainer.style.cursor = \"pointer\";\ndocument.body.appendChild(container);\n\nconst modalRoot = document.createElement('div');\nmodalRoot.id = \"modal-root\";\ndocument.body.appendChild(modalRoot);\n\nclass Box extends React.Component {\n    render() {\n        return ReactDOM.createPortal(\n        <div style={{ textAlign: \"center\" }}>\n            <div>Hello world</div>\n            <button onClick={() => alert(\"How are you doing?\")}>Click me!</button>\n        </div>,\n        container);\n    }\n}\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.el = document.createElement('div');\n    }\n    componentDidMount() {\n        modalRoot.appendChild(this.el);\n    }\n    componentWillUnmount() {\n        modalRoot.removeChild(this.el);\n    }\n    render() {\n        return ReactDOM.createPortal(\n            this.props.children,\n            this.el\n        );\n    }\n}\nclass Parent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { clicks: 0 };\n    }\n    handleClick() {\n        this.setState(state => (\n            {\n                clicks: state.clicks + 1,\n            }\n        ))\n    }\n    render() {\n        return (\n            <div onClick={this.handleClick.bind(this)}>\n                <p>Number of clicks: {this.state.clicks}</p>\n                <p>\n                    Open up the browser DevTools\n                    to observe that the buttonis not a child of the div with\n                    the onClick handler.\n                </p>\n                <Modal>\n                    <Child />\n                </Modal>\n            </div>\n        );\n    }\n}\nclass Child extends React.Component {\n    render() {\n        return (\n            <div className=\"modal\">\n                <button>I come from Portals section and I'm not rendered in root element.</button>\n            </div>\n        );\n    }\n}\n\n\nclass Portals extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Portals</h2>\n                <p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierachy of \n                the parent component.</p>\n                <strong>Syntax: ReactDOM.createPortal(child, container)</strong>\n                <h3>Usage</h3>\n                <p>Normally, when you return an element from a component's render method, \n                it's mounted into the DOM as a child of the nearest parent node.</p>\n                <p>However ,sometimes it's useful to insert a child into a different location in the DOM.</p>\n                <p>A typical use case fo portal is when a parent component has an overflow: hidden or z-index style, \n                but you need the child to visually \"break out\" of its container. \n                For example, dialogs, hovercards, and tooltips.</p>\n                <Box />\n                <h3>Event Bubbling Through Portals</h3>\n                <p>Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in \n                every other way. Features like context work exactly the same regardless of whether the child is a portal, \n                as the portal still exists in the React tree regardless of position in the DOM tree.</p>\n                <p>This includes event bubbling. <span style={{ color: \"blue\" }}>An event fired from inside a portal will propogate to ancestors in \n                the containing React tree</span>, even if those elements are not ancestors in the DOM tree. Assuming the following HTML structure.</p>\n                <Parent />\n            </div>\n        );\n    }\n}\n\nexport default Portals;","import React, { Profiler, useState } from 'react';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n    return (\n        <button onClick={() => setCount(count + 1)}>Clicks: {count}</button>\n    );\n}\n\n\nclass ProfilerAPI extends React.Component {\n    constructor(props) {\n        super(props);\n        this.divRef = React.createRef();\n    }\n    random(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    update() {\n        if (!this.divRef.current) {\n            return;\n        }\n        const color = `rgb(${this.random(0, 255)}, ${this.random(0, 255)}, ${this.random(0, 255)})`;\n        this.divRef.current.innerHTML = \"updated\";\n        this.divRef.current.style.backgroundColor = color;\n        this.divRef.current.style.textAlign = \"center\";\n    }\n    onRenderCallback(id, phase, actualDuration, baseDuration, startTime, commitTime, interactions) {\n        console.log(\"id: \", id);\n        console.log(\"phase: \", phase);\n        console.log(\"actualDuration: \", actualDuration);\n        console.log(\"baseDuration: \", baseDuration);\n        console.log(\"startTime: \", startTime);\n        console.log(\"commitTime: \", commitTime);\n        console.log(\"interactions: \", interactions);\n    }\n    render() {\n        return (\n            <div>\n                <h2>Profiler API</h2>\n                <p>The Profiler measures how often a React application renders and what the \"cost\" of rendering is. \n                Its purpose is to help identify parts of an application that are slow and may benefit from \n                optimizations such as memoization.</p>\n                <h3>Usage</h3>\n                <p>A Profiler can be added anywhere in a React tree to measure the cost of rendering that part of the tree. \n                It requires two props: an id (string) and an <span>onRender callback (function) which React calls any time a component within \n                the tree \"commits\" an update.</span></p>\n                <Profiler \n                    id=\"Counter-parent\"\n                    onRender={this.onRenderCallback.bind(this)}\n                >\n                    <Profiler \n                        id=\"Counter\"\n                        onRender={this.update.bind(this)}\n                        \n                    >\n                        <Counter />\n                    </Profiler>\n                </Profiler>\n                <div ref={this.divRef}></div>\n                <p>Pofiler components can also be nested to measure different components within the same subtree.</p>\n            </div>\n        );\n    }\n}\n\nexport default ProfilerAPI;","import React from 'react';\n\nclass Reconciliation extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Reconciliation</h2>\n                <p>React provides a declarative API so that you don't have to worry about \n                exactly what changes on every update. This makes writing applications a lot easier, \n                but it might not be obvious how this is implemented within React. \n                This article explains the choices we made in React \"diffing\" algorithm \n                so that component updates are predictable while being fast enough for high-performance apps.</p>\n                <h3>Motivation</h3>\n                <p>When you use React, at a single point in time you can think of the render() function as \n                creating a tree of React elements. On the next state or props update, that render() function will return a different tree of React elements. \n                React then needs to figure out how to efficiently update the UI to mathch the most recent tree.</p>\n                <h3>The Diffing algorithm</h3>\n                <p>When diffing two trees, React first compares the two root elements. \n                The behavior is different depending on the types of the root elements.</p>\n                <h4>Elements Of Different Types</h4>\n                <p>Any components below the root will also get unmounted and have their state destroyed. \n                For example, when diffing.</p>\n                <h4>DOM Elements Of The Same Type</h4>\n                <p>When comparing tow React DOM elements of the same type, React looks at the attributes of both, \n                keeps the same underlying DOM node, and only updates the changed attributes.</p>\n                <h4>Component Elements Of The Same Type</h4>\n                <p>When a component updates, the instance stays the same, so that state is maintained across render. \n                React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the \n                underlying instance.</p>\n                <h4>Recursing On Children</h4>\n                <p>By default, when recursing on the children of a DOM node, \n                React just iterates over both lists of children at the same time and generates a mutation \n                whenever there's a difference.</p>\n                <h4>Keys</h4>\n                <p>In order to solve this issue, React supports a key attribute. \n                When children have keys, React uses the key to match children in the original tree with children in the subsequent tree.</p>\n                <h3>Tradeoffs</h3>\n                <p>It is important to remember that the reconciliation algorithm is an implementation detail. \n                React could rerender the whole app on every action; \n                the end result would be the same. Just to be clear, \n                rerender in this context means calling render for all components, \n                it doesn't mean React will unmount and remount them. \n                It will only apply the differences following the rules stated in the previouse sections.</p>\n            </div>\n        );\n    }\n}\n\nexport default Reconciliation;","import React, { useEffect, useRef } from 'react';\n\nfunction Hello() {\n    const inputRef = useRef(null);\n    useEffect(() => {\n        inputRef.current.focus();\n    });\n    return (\n        <>\n            <input placeholder=\"Your name...\" ref={inputRef} type=\"text\" />\n            <button onClick={() => alert(`Hello ${inputRef.current.value}, How are you doing?`)}>Hi</button>\n        </>\n    );\n}\n\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0,\n        }\n    }\n    incrementCount() {\n        this.setState(state => (\n            { count: state.count + 1 }\n        ));\n    }\n    render() {\n        return (\n            <div>Clicks: {this.state.count}</div>\n        );\n    }\n}\nclass CustomTextInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInput = null;\n        this.setTextInputRef = element => {\n            this.textInput = element;\n        };\n        this.focusTextInput = () => {\n            if (!this.textInput) {\n                return;\n            }\n            this.textInput.focus();\n        }\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <input type=\"text\" ref={this.setTextInputRef} />\n                <button onClick={this.focusTextInput}>Focus the text input</button>\n            </React.Fragment>\n        );\n    }\n}\nfunction AnotherCustomTextInput(props) {\n    return (\n        <input ref={props.inputRefCallback} type=\"text\" />\n    );\n}\nfunction Parent() {\n    let inputRef = null;\n    return (\n        <div>\n            <AnotherCustomTextInput inputRefCallback={el => inputRef = el} />\n            <button onClick={() => inputRef.focus()}>Focus the text input</button>\n        </div>\n    );\n}\n\nclass RefsAndTheDOM extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counterRef = React.createRef();\n    }\n    render() {\n        return (\n            <div>\n                <h2>Refs and the DOM</h2>\n                <p>Refs provide a way to access DOM nodes or React elements created in \n                the render method.</p>\n                <p>In the typical dataflow, props are the only way that parent components interact with their\n                children. To modify a child, you re-render it with new props. However, there are a few cases \n                where you need to imperatively modify a child outside of the typical dataflow. \n                The child to be modified could be instance of a React component, or it could be a DOM element. \n                For both of these cases, React provides an escape hatch.</p>\n                <h3>When to Use Refs</h3>\n                <ul>\n                    <li>Managing focus, text selection, or media playback.</li>\n                    <li>Triggering imperative animations.</li>\n                    <li>Integrating with third-party DOM libraries.</li>\n                </ul>\n                <strong>Note: Avoid using refs for anything that can be done declaratively.</strong>\n                <h3>Creating Refs</h3>\n                <Hello />\n                <h3>Accessing Refs</h3>\n                <p>When a ref is passed to an element in render, a reference to the node becomes accessible at \n                the current attribute of the ref.</p>\n                <p>The value of the ref differs depending on the type of the node.</p>\n                <ul>\n                    <li>When the ref attribute is used on an HTML element, the ref created in the constructor with \n                    React.createRef() receives the underlying DOM element as its current property.</li>\n                    <li>When the ref attribute is used on a custom class component, the ref object receives the mounted instance of the component as its current.</li>\n                    <li><strong>You may not use the ref attribute on function components because they don't have instances.</strong></li>\n                </ul>\n                <Counter ref={this.counterRef} />\n                <p>The button below is not a member of Counter component and cannot access its state. \n                But we have an alternative way to access them using a ref that receive the instance of Counter component.</p>\n                <button onClick={() => this.counterRef.current.incrementCount()}>Increment</button>\n                <h4>Refs and Function Components</h4>\n                <p>By default, you may not use the ref attribute on function components because \n                they don't have instances.</p>\n                <p>If you want to allow people to take a ref to your function component, \n                you can use forwardRef, or you can convert the component to a class.</p>\n                <h3>Callback Refs</h3>\n                <p>React also supports another way to set refs called \"callback refs\", which gives more fine-grain \n                control over when refs are set and unset.</p>\n                <p>Instead of passing a ref attribute created by createRef(), you pass a function. \n                The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.</p>\n                <CustomTextInput />\n                <p>React will call the ref callback with the DOM element when the component mounts, \n                and call it with null when it unmounts. Refs are guranteed to be up-to-date before \n                componentDidMount or componentDidUpdate fires.</p>\n                <p>You can pass callback refs between component like you can with object refs that were created with \n                React.createRef()</p>\n                <Parent />\n            </div>\n        );\n    }\n}\n\nexport default RefsAndTheDOM;","import React from 'react';\n\nclass MouseTracker extends React.Component {\n    render() {\n        return (\n            <div>\n                <strong>Click and Move the mouse around</strong>\n                <Mouse render={mouse => (\n                    <Koala mouse={mouse} />\n                )} \n                    anotherRender={() => (\n                        <div>This is another render.</div>\n                    )}\n                />\n            </div>\n        );\n    }\n}\nclass Mouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: 0, y: 0, scroll: 0, allow: false\n        }\n        document.onmousemove = (e) => {\n            const { scrollTop } = document.documentElement;\n            this.setState({ x: e.clientX, y: scrollTop + e.clientY });\n\n        }\n        \n    }\n    handleChange(e) {\n        this.setState({ allow: e.target.checked })\n    }\n    render() {\n        // Instead of providing a static representation of what <Mouse> renders, \n        // use the \"render\" prop to dynamically determine what to render.\n        return (\n            <div>\n                <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n                <input type=\"checkbox\" onChange={this.handleChange.bind(this)} checked={this.state.allow} /> enabel toggle image\n                {/* <Koala mouse={this.state} /> */}\n                {this.props.render(this.state)}\n                {this.props.anotherRender()}\n            </div>\n        );\n    }\n}\nclass Koala extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isShow: false,\n        }\n        document.onclick = () => {\n            if (!this.props.mouse.allow) {\n                return;\n            }\n            this.setState(state => ({ isShow: !state.isShow }));\n        }\n    }\n    render() {\n        const mouse = this.props.mouse;\n        if (this.state.isShow) {\n            return (\n                <img \n                    src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Koala_climbing_tree.jpg/240px-Koala_climbing_tree.jpg\"\n                    style={{ position: \"absolute\", left: mouse.x, top: mouse.y, width: \"100px\", height: \"auto\" }}\n                    alt=\"Koala\"\n                />\n            );\n        }\n        else {\n            return <h1>Hi</h1>\n        }\n    }\n}\n\n\nclass RenderProp extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Render Prop</h2>\n                <p>The term \"render prop\" refers to a technique for sharing code \n                between React components using a prop whose value is a function.</p>\n                <p>A component with a render prop takes a function that returns a React element and \n                calls it instead of implementing its own render logic</p>\n                <h3>Use Render Props for Cross-Cutting-Concerns</h3>\n                <MouseTracker />\n            </div>\n        );\n    }\n}\n\nexport default RenderProp;","import React from 'react';\n\nclass StaticTypeChecking extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Static Type Checking</h2>\n                <p>Static type checkers like Flow and TypeScript identify certain types of \n                problems before you even run your code. \n                They can also improve developer workflow by adding features like auto-completion. \n                For this reason, we recommend using Flow or TypeScript instead of PropTypes for larger code bases.</p>\n                <h3>Flow</h3>\n                <h3>TypeScript</h3>\n                <h3>Reason</h3>\n                <h3>Kotlin</h3>\n            </div>\n        );\n    }\n}\n\nexport default StaticTypeChecking;","import React from 'react';\n\nclass Component1 extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n    }\n    componentDidMount() {\n        this.inputRef.current.focus();\n    }\n    render() {\n        return (\n            <div>\n                <input placeholder=\"focus me...\" ref={this.inputRef} type=\"text\" />\n            </div>\n        );\n    }\n}\n\nclass StrictMode extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Strict Mode</h2>\n                <React.StrictMode>\n                    <Component1 />\n                </React.StrictMode>\n            </div>\n        );\n    }\n}\n\nexport default StrictMode;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n    render() {\n        return (\n            <div>\n                <div>Hello, {this.props.name}</div>\n            </div>\n        );\n    }\n}\nGreeting.propTypes = {\n    name: PropTypes.string\n};\nclass ParentRequireSingleChild extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.children}\n            </div>\n        );\n    }\n}\nParentRequireSingleChild.propTypes = {\n    children: PropTypes.element.isRequired\n};\nclass Hola extends React.Component {\n    render() {\n        return (\n            <div>\n                Hola {this.props.name}, Como estad?\n            </div>\n        );\n    }\n}\nHola.defaultProps = {\n    name: \"Chondan\"\n};\nclass Gender extends React.Component {\n    render() {\n        return (\n            <div>Your gender is {this.props.gender}</div>\n        );\n    }\n}\nGender.propTypes = {\n    gender: PropTypes.oneOf([\"male\", \"female\"]).isRequired\n}\n\nclass TypeCheckingWithPropTypes extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Typechecking With PropTypes</h2>\n                <p>As your app grows, you can catch a lot of bugs with typechecking. \n                For some applications, you can use JavaScript extensions like Flow or TypeScript to typecheck your whole application. \n                But even if you don't use those, React has some built-in typechecking abilities. \n                To run typechecking on the props for a component, you can assign the special propTypes property.</p>\n                <h3>PropTypes</h3>\n                <Greeting name={\"Chondan\"} />\n                <h3>Requiring Single Child</h3>\n                <ParentRequireSingleChild>\n                    <div>How are you doing?</div>\n                </ParentRequireSingleChild>\n                <h3>Default Prop Values</h3>\n                <Hola />\n                <Gender gender=\"male\" />\n            </div>\n        );\n    }\n}\n\nexport default TypeCheckingWithPropTypes;","import React from 'react';\n\nclass NameForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.inputRef = React.createRef();\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(`Hello ${this.inputRef.current.value}, How are you doing?`);\n    }\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Name: <input defaultValue=\"Your Name\" ref={this.inputRef} type=\"text\" />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        );\n    }\n}\nclass FileInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fileInputRef = React.createRef();\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.fileInputRef.current.files[0]) {\n            return;\n        }\n        alert(\n            `Selected file - ${this.fileInputRef.current.files[0].name}`\n        );\n    }\n    render() {\n        return (\n            <form onSubmit={e => this.handleSubmit(e)}>\n                <label>\n                    Upload file: <input ref={this.fileInputRef} type=\"file\" />\n                </label>\n                <button type=\"submit\">Submit</button>\n            </form>\n        );\n    }\n}\n\nclass UncontrolledComponents extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Uncontrolled Components</h2>\n                <p>In most cases, we recomment using controlled components to \n                implement forms. In a controlled component, \n                form data is handled by a React component. \n                The alternative is uncontrolled conponents, where form data is handled by the DOM itself.</p>\n                <NameForm />\n                <h3>Default Values</h3>\n                <p>In the React rendering lifecycle, the value attribute on form elements will override the value in \n                the DOM. With an uncontrolled component, you often want React to specify the initial value, \n                but leave subsequent updates uncontrolled. To handle this case, you can specify a \n                defaultValue attribute instead of value.</p>\n                <h3>The file input Tag</h3>\n                <p>In React, an &lt;input type=\"file\" /&gt; is always an uncontrolled component because its value \n                can only be set by a user, and not programmatically.</p>\n                <FileInput />\n            </div>\n        );\n    }\n}\n\nexport default UncontrolledComponents;","import React from 'react';\nimport Accessibility from './components/Accessibility/index';\nimport CodeSplitting from './components/CodeSplitting/index';\nimport Context from './components/Context/index';\nimport ErrorBoundaries from './components/ErrorBoundaries/index';\nimport ForwardingRefs from './components/ForwardingRefs/index';\nimport Fragments from './components/Fragments/index';\nimport HigherOrderComponents from './components/HigherOrderComponents';\nimport IntegratingWithOtherLibraries from './components/IntegratingWithOtherLibraries/index';\nimport JSXInDepth from './components/JSXInDepth/index';\nimport OptimizingPerformance from './components/OptimizingPerformance/index';\nimport Portals from './components/Portals/index';\nimport ProfilerAPI from './components/ProfilerAPI';\nimport Reconciliation from './components/Reconciliation/index';\nimport RefsAndTheDOM from './components/RefsAndTheDOM/index';\nimport RenderProp from './components/RenderProp/index';\nimport StaticTypeChecking from './components/StaticTypeChecking/index';\nimport StrictMode from './components/StrictMode/index';\nimport TypecheckingWithPropTypes from './components/TypecheckingWithPropTypes/index';\nimport UncontrolledComponents from './components/UncontrolledComponents/index';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>React Advanced Guides</h1>\n                <Accessibility />\n                <CodeSplitting />\n                <Context />\n                <ErrorBoundaries />\n                <ForwardingRefs />\n                <Fragments />\n                <HigherOrderComponents />\n                <IntegratingWithOtherLibraries />\n                <JSXInDepth />\n                <OptimizingPerformance />\n                <Portals />\n                <ProfilerAPI />\n                <Reconciliation />\n                <RefsAndTheDOM />\n                <RenderProp />\n                <StaticTypeChecking />\n                <StrictMode />\n                <TypecheckingWithPropTypes />\n                <UncontrolledComponents />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}